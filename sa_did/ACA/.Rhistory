weights = ~W)
#---------------------------------------------------
#      Empirical Exercise
#      Effect of ACA on Health insurance
#---------------------------------------------------
#-----------------------------------------------------------------------------
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
library(did)
library(DRDID)
library(here)
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
library(dplyr)
library(fixest)
library(glue)
#---------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Load data
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
# Only use 2 periods of data 2013 and 2014
acafs_sub <- filter(acafs, acafs$year==2014 | acafs$year==2013)
#-----------------------------------------------------------------------------
# Do some data manipulations
# Ensure that stfips are numeric
acafs_sub$stfips2 <- as.numeric(acafs$stfips)
# Make sure year is numeric (and correct)
acafs_sub$year2 <- 1985 + as.numeric(acafs$year)
# Create treatment group dummy
acafs_sub$treated <- as.numeric(acafs$yexp2==2014)
acafs_sub$treated[is.na(acafs$treated)] <- 0
# Create Post dummy
acafs_sub$post <- as.numeric(acafs$year==2014)
#---------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------
# Start the analysis
#---------------------------------------------------------------------------------------
# Get TWFE coefficient
twfe <- fixest::feols(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = ~W,
cluster = ~stfips2)
summary(twfe)
#---------------------------------------------------------------------------------------
reg1 <- lm(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = ~W)
source('C:/Users/santanph/Dropbox/Vanderbilt/2020/DiD/Applications/ACA/codes/1_ACA-exercise-simple.R')
I(treated * post)
View(acafs_sub)
#---------------------------------------------------------------------------------------
reg1 <- lm(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W)
reg1
#---------------------------------------------------
#      Empirical Exercise
#      Effect of ACA on Health insurance
#---------------------------------------------------
#-----------------------------------------------------------------------------
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
library(did)
library(DRDID)
library(here)
library(tidyverse)
library(dplyr)
library(fixest)
library(estimatr)
#---------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Load data
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
# Only use 2 periods of data 2013 and 2014
acafs_sub <- filter(acafs, acafs$year==2014 | acafs$year==2013)
#-----------------------------------------------------------------------------
# Do some data manipulations
# Ensure that stfips are numeric
acafs_sub$stfips2 <- as.numeric(acafs_sub$stfips)
# Make sure year is numeric (and correct)
acafs_sub$year2 <- 1985 + as.numeric(acafs_sub$year)
# Create treatment group dummy
acafs_sub$treated <- as.numeric(acafs_sub$yexp2==2014)
acafs_sub$treated[is.na(acafs_sub$treated)] <- 0
# Create Post dummy
acafs_sub$post <- as.numeric(acafs_sub$year==2014)
#---------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------
# Start the analysis
#---------------------------------------------------------------------------------------
# Get TWFE coefficient
twfe <- fixest::feols(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = ~W,
cluster = ~stfips2)
summary(twfe)
#---------------------------------------------------------------------------------------
# Alternative ways of estimating the ATT
lm_reg <- lm_robust(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W)
#---------------------------------------------------------------------------------------
# Alternative ways of estimating the ATT
lm_reg <- lm_robust(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W,
cluster = stfips2)
lm_reg
summary(twfe)
#---------------------------------------------------------------------------------------
# Alternative ways of estimating the ATT
lm_reg <- lm_robust(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W,
cluster = stfips2)
lm_reg
#---------------------------------------------------------------------------------------
# Alternative ways of estimating the ATT
lm_reg <- lm_robust(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W,
cluster = stfips2,
se_type = "stata")
lm_reg
summary(twfe)
#---------------------------------------------------------------------------------------
# We can do it by brute-force, too
mean_y_treat_post = mean(acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==1])
DiD_brute_force <- mean_y_treat_post - (mean_y_treat_pre + mean_y_untreat_post - mean_y_untreat_pre)
#---------------------------------------------------------------------------------------
# We can do it by brute-force, too
mean_y_treat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==1])
mean_y_treat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==1])
mean_y_untreat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==0])
mean_y_untreat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==0])
DiD_brute_force <- mean_y_treat_post - (mean_y_treat_pre + mean_y_untreat_post - mean_y_untreat_pre)
DiD_brute_force
mean_y_treat_post
#---------------------------------------------------------------------------------------
# We can do it by brute-force, too
mean_y_treat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==1]) /
mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==1])
mean_y_treat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==1])/
mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==1])
mean_y_untreat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==0])/
mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==0])
mean_y_untreat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==0])/
mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==0])
DiD_brute_force <- mean_y_treat_post - (mean_y_treat_pre + mean_y_untreat_post - mean_y_untreat_pre)
DiD_brute_force
DiD_brute_force
twfe
library(readstata13)
library(ggpubr)
library(did)
library(DRDID)
library(here)
library(tidyverse)
library(dplyr)
library(fixest)
library(estimatr)
devtools::install_github("bcallaway11/did")
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
View(acafs)
View(acafs)
acafs_sub <- filter(acafs, acafs$year==2014 | acafs$year==2013)
acafs_sub$year
acafs_sub$stfips2 <- as.numeric(acafs_sub$stfips)
View(acafs_sub)
acafs_sub$year2 <- 1985 + as.numeric(acafs_sub$year)
acafs_sub$treated <- as.numeric(acafs_sub$yexp2==2014)
acafs_sub$treated[is.na(acafs_sub$treated)] <- 0
acafs_sub$post <- as.numeric(acafs_sub$year==2014)
gc()
twfe <- fixest::feols(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = ~W,
cluster = ~stfips2)
View(twfe)
summary(twfe)
lm_reg <- lm_robust(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = W,
cluster = stfips2)
summary(lm_reg)
mean_y_treat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==1]) /
mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==1])
mean_y_treat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==1]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==1])/
mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==1])
mean_y_untreat_post = mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==1 & acafs_sub$treated==0])/
mean(
acafs_sub$W[acafs_sub$post==1 & acafs_sub$treated==0])
mean_y_untreat_pre = mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==0]*
acafs_sub$dins[acafs_sub$post==0 & acafs_sub$treated==0])/
mean(
acafs_sub$W[acafs_sub$post==0 & acafs_sub$treated==0])
DiD_brute_force <- mean_y_treat_post - (mean_y_treat_pre + mean_y_untreat_post - mean_y_untreat_pre)
DiD_brute_force
twfe
twfe <- fixest::feols(dins ~ treated + post + I(treated * post),
data = acafs_sub,
weights = ~W,
fe = ~stfips,
cluster = ~stfips2)
twfe <- fixest::feols(dins ~ treated + post + I(treated * post) + stfips,
data = acafs_sub,
weights = ~W,
cluster = ~stfips2)
library(readstata13)
library(statar)
library(ggplot2)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
library(did)
# Use here package to facilitate relative paths
library(here)
# Use these for data manipulation, and plots
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
library(dplyr)
library(bacondecomp)
library(TwoWayFEWeights)
library(fixest)
library(glue)
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
acafs$stfips2 <- as.numeric(acafs$stfips)
acafs$year2 <- 1985 + as.numeric(acafs$year)
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
#-----------------------------------------------------------------------------
# Do some data manipulations
# Ensure that stfips are numeric
acafs$stfips2 <- as.numeric(acafs$stfips)
# Make sure year is numeric (and correct)
acafs$year2 <- 1985 + as.numeric(acafs$year)
acafs$treated <- as.numeric(acafs$year2 >= acafs$yexp2)
acafs_no_never <- subset(acafs, acafs$yexp2!=0)
twfe <- fixest::feols(dins ~ treated| stfips2 + year2,
data = acafs,
weights = ~W,
cluster = ~stfips2)
summary(twfe)
acafs <- data.frame(read.dta13(here("data",'ehec_data.dta')))
#-----------------------------------------------------------------------------
# Do some data manipulations
# Ensure that stfips are numeric
acafs$stfips2 <- as.numeric(acafs$stfips)
# Make sure year is numeric (and correct)
acafs$year2 <- 1985 + as.numeric(acafs$year)
# If year of adoption is missing, set it to Infinity ( zero or any large number  would also work with the did package)
acafs$yexp2[is.na(acafs$yexp2)] <- Inf
# Create treatment dummy - 1 if treated by that year, 0 otherwise
acafs$treated <- as.numeric(acafs$year2 >= acafs$yexp2)
#-----------------------------------------------------------------------------
# Create subset of data without never-treated
acafs_no_never <- subset(acafs, acafs$yexp2!=0)
#---------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------
# Start the analysis
#---------------------------------------------------------------------------------------
# Get TWFE coefficient
twfe <- fixest::feols(dins ~ treated| stfips2 + year2,
data = acafs,
weights = ~W,
cluster = ~stfips2)
#Note: everything that happens after the bar are things we don't want to report in the output. Here, these are fixed effects... we don't care about those coefficients.
summary(twfe)
df_bacon <- bacon(dins ~ treated,
data = acafs,
id_var = "stfips2", #unit FE
time_var = "year2") #time FE
dCDH_decomp <- twowayfeweights(
df = acafs,
Y = "dins",
G = "stfips2", #unit
T = "year2", #time
D ="treated", #treatment
#weights = "W",
cmd_type =  "feTR"
)
dCDH_positive <- sum(dCDH_decomp$weight[dCDH_decomp$weight>=0])
# Negative weights
dCDH_negative <- sum(dCDH_decomp$weight[dCDH_decomp$weight<0])
# Libraries
library(readstata13)
library(statar)
library(ggplot2)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
library(did)
# Use here package to facilitate relative paths
library(here)
# Use these for data manipulation, and plots
library(tidyverse)
library(ggplot2)
library(scales)
library(ggrepel)
library(dplyr)
library(bacondecomp)
library(TwoWayFEWeights)
library(fixest)
library(glue)
atts_never <- did::att_gt(yname = "dins", # name of the LHS variable
tname = "year2", # name of the time variable
idname = "stfips2", # name of the id variable
gname = "yexp2", # name of the first treatment period variable; this uniquely identifies treatment group cohorts... can't be missing!
data = acafs, # name of the data
xformla = NULL,
weightsname = "W",
est_method = "reg", # estimation method. "dr" means doubly robust
control_group = "nevertreated", # set the control group which is either "nevertreated" or "notyettreated"
bstrap = TRUE, # if TRUE compute boostrapped SE
biters = 1000, # number of boostrap interations
print_details = FALSE, # if TRUE, print detailed results
panel = TRUE) # whether the data is panel or repeated cross-sectional
#Note: att_gt breaks out all the ATTs for each treatment cohort (g) and time period (t). Basically splits out all the 2x2 components and outputs each one.
summary(atts_never)
agg_effects_es_never <- aggte(atts_never, type = "dynamic", min_e = -5, max_e = 5)
summary(agg_effects_es_never)
ggdid(atts_never, ncol = 3)
ggdid(agg_effects_es_never)
atts_ny <- did::att_gt(yname = "dins", # name of the LHS variable
tname = "year2", # name of the time variable
idname = "stfips2", # name of the id variable
gname = "yexp2", # name of the first treatment period variable
data = acafs, # name of the data
xformla = NULL,
weightsname = "W",
est_method = "reg", # estimation method. "dr" means doubly robust
control_group = "notyettreated", # set the control group which is either "nevertreated" or "notyettreated"
bstrap = TRUE, # if TRUE compute boostrapped SE
biters = 1000, # number of boostrap interations
print_details = FALSE, # if TRUE, print detailed results
panel = TRUE) # whether the data is panel or repeated cross-sectional
summary(atts_ny)
agg_effects_es_ny <- aggte(atts_ny, type = "dynamic", min_e = -5, max_e = 5)
summary(agg_effects_es_ny)
#---------------------------------------------------------------------------------------
# Use not-yet-treated as comparison group (drop all never-treated)
atts_ny2 <- did::att_gt(yname = "dins", # name of the LHS variable
tname = "year2", # name of the time variable
idname = "stfips2", # name of the id variable
gname = "yexp2", # name of the first treatment period variable
data = acafs_no_never, # name of the data
xformla = NULL,
weightsname = "W",
est_method = "reg", # estimation method. "dr" means doubly robust
control_group = "notyettreated", # set the control group which is either "nevertreated" or "notyettreated"
bstrap = TRUE, # if TRUE compute boostrapped SE
biters = 1000, # number of boostrap interations
print_details = FALSE, # if TRUE, print detailed results
panel = TRUE) # whether the data is panel or repeated cross-sectional
summary(atts_ny2)
agg_effects_es_ny2 <- aggte(atts_ny2, type = "dynamic", min_e = -5, max_e = 5)
summary(agg_effects_es_ny2)
#---------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------
# Now we are ready to go! Let me put all the outputs into a table
event_study_diff_ny <-   data.frame(
type          = "dynamic",
term = paste0('ATT(', agg_effects_es_ny$egt, ")"),
event.time= agg_effects_es_ny$egt,
estimate  = agg_effects_es_ny$att.egt,
std.error = agg_effects_es_ny$se.egt,
conf.low  = agg_effects_es_ny$att.egt - agg_effects_es_ny$crit.val.egt * agg_effects_es_ny$se.egt,
conf.high = agg_effects_es_ny$att.egt + agg_effects_es_ny$crit.val.egt  * agg_effects_es_ny$se.egt,
point.conf.low  = agg_effects_es_ny$att.egt - stats::qnorm(1 - agg_effects_es_ny$DIDparams$alp/2) * agg_effects_es_ny$se.egt,
point.conf.high = agg_effects_es_ny$att.egt + stats::qnorm(1 - agg_effects_es_ny$DIDparams$alp/2) * agg_effects_es_ny$se.egt
)
# Now we are ready to go! Let me put all this into a table
event_study_diff_never <-   data.frame(
type          = "dynamic",
term = paste0('ATT(', agg_effects_es_never$egt, ")"),
event.time= agg_effects_es_never$egt,
estimate  = agg_effects_es_never$att.egt,
std.error = agg_effects_es_never$se.egt,
conf.low  = agg_effects_es_never$att.egt - agg_effects_es_never$crit.val.egt * agg_effects_es_never$se.egt,
conf.high = agg_effects_es_never$att.egt + agg_effects_es_never$crit.val.egt  * agg_effects_es_never$se.egt,
point.conf.low  = agg_effects_es_never$att.egt - stats::qnorm(1 - agg_effects_es_never$DIDparams$alp/2) * agg_effects_es_never$se.egt,
point.conf.high = agg_effects_es_never$att.egt + stats::qnorm(1 - agg_effects_es_never$DIDparams$alp/2) * agg_effects_es_never$se.egt
)
event_study_diff_ny2 <-   data.frame(
type          = "dynamic",
term = paste0('ATT(', agg_effects_es_ny2$egt, ")"),
event.time= agg_effects_es_ny2$egt,
estimate  = agg_effects_es_ny2$att.egt,
std.error = agg_effects_es_ny2$se.egt,
conf.low  = agg_effects_es_ny2$att.egt - agg_effects_es_ny2$crit.val.egt * agg_effects_es_ny2$se.egt,
conf.high = agg_effects_es_ny2$att.egt + agg_effects_es_ny2$crit.val.egt  * agg_effects_es_ny2$se.egt,
point.conf.low  = agg_effects_es_ny2$att.egt - stats::qnorm(1 - agg_effects_es_ny2$DIDparams$alp/2) * agg_effects_es_ny2$se.egt,
point.conf.high = agg_effects_es_ny2$att.egt + stats::qnorm(1 - agg_effects_es_ny2$DIDparams$alp/2) * agg_effects_es_ny2$se.egt
)
theme_set(
#theme_clean() +
theme_classic() +
theme(
panel.background = element_rect(fill = "transparent"), # bg of the panel
plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
legend.background = element_rect(color = "white"),
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.spacing = unit(10, "lines"))
)
p_es_never1 <- ggplot(data = event_study_diff_never,
mapping = aes(x = event.time, y = estimate)) +
geom_vline(xintercept = 0-0.05, color = 'grey', size = 1.2, linetype = "dotted") +
geom_ribbon(aes(ymin= point.conf.low, ymax=  point.conf.high), alpha = 0.5, size = 1, fill = "steelblue")+
geom_ribbon(aes(ymin=  conf.low, ymax =  conf.high), alpha =  0.3, size = 1, fill = "steelblue")+
geom_line(mapping = aes(x = event.time, y=estimate), colour = "black", size = 0.6, linetype = "dashed") +
geom_line(size = 1.2, alpha = 2, colour = "darkblue") +
geom_hline(yintercept = 0, colour="black", size = 0.25, linetype = "dotted")+
xlab('Event time') +
ylab("Event-Study Estimate") +
scale_x_continuous(breaks = c(-5:5)) +
theme(axis.text.y = element_text(size = 12))+
theme(axis.text.x = element_text(size = 12)) +
theme(axis.title = element_text(color="black",  size = 12))+
theme(plot.title=ggtext::element_markdown(size = 12,
#face = "bold",
color="black",
hjust=0,
lineheight=1.2)
)+
annotate(geom="text", x=3, y=-0.01, label="Average of post-treatment ES coef's:
0.0751 (0.013)",
color="black")
p_es_never1
library(ggpubr)
source('//wpa7o0oemaer01.westpoint.edu/EXTERNAL/STAFF/homme_carson/rprojects/sa_did/ACA/codes/1_ACA-exercise-simple.R', echo=TRUE)
install.packages("Rtools")
source('//wpa7o0oemaer01.westpoint.edu/EXTERNAL/STAFF/homme_carson/rprojects/sa_did/ACA/codes/1_ACA-exercise-simple.R', echo=TRUE)
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
library(ggpubr)
install.packages("Rcpp")
# Load packages
#-----------------------------------------------------------------------------
# Libraries
library(readstata13)
library(ggpubr)
#Download latest version of did package and load it
devtools::install_github("bcallaway11/did")
library(did)
library(DRDID)
library(here)
library(tidyverse)
library(dplyr)
library(fixest)
library(estimatr)
source('//wpa7o0oemaer01.westpoint.edu/EXTERNAL/STAFF/homme_carson/rprojects/sa_did/ACA/codes/1_ACA-exercise-simple.R', echo=TRUE)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
install.packages("jsonlite", type = "source")
